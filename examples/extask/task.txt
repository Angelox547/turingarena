interface alien {

   functions {
    int find_centre(int N, int Xi,int Yi);
    int update();
    int query();
    int fill(out int C[ret??MAXN]);
    callback int examine(int x, int y);
    callback int solution(int x, int y);
   }

   globals {
      int N; 
      int M; 
      int A[N]; 
      int B[N][M]; 
   }

   limits {
       1 <= N <= 10000;
       1 <= M <= 12131;
       0 <= i <= N;
       0 <= j <= M;
       1 <= A[i], B[i][j] <= N*(M**2);
       1 <= B[k], N >= B[j]; k < j;
   }

   /*
        times(0, N) -> repeat any number of times between 0 and N
        loop -> repeat any number of times (0 to inf)
        loop(0, 5) -> repeat exactly 6 times [0..6]
        loop(1, 7, i)
   */

   stages {
      func main() { // 0
        set N, M // 1
        find_centre() // 2
        set A, B
        find_centre()
        switch {
            update() : u
            query() : q
            fill() : f
        }
        get A, B
      }

      func find_centre() {
          loop {
            call examine
          }
          loop(1, 10000, i) {
              call examine
              switch {
                  call examine : e
                  call solution : s
              }
          } 
          solution
      }

      func solution() {
          times(1, N) {
              call update()
          }
      }

      func examine(x) {
            loop() {
                call query();
                call update();
            }
            set X, Y;
            call update();
      }

   }

}

driver main {
  int evaluate();
}

scenario test1 {
  phase evaluate {
    slot solution interface alien;
    driver main evaluate();
  }
}
