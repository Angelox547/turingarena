= TuringArena protocol

== Requirements on communication statements

=== Definitions

The _communication statements_ are `input`, `output`, `call` and `flush`.

We say that a function call is _input only_
if it does not have a return value and
it is not allowed to invoke callbacks,
i.e., any callback invoked by the algorithm code
results in a framework-generated error.
Otherwise, we say that a function call is _with output_.

=== Rules on communication blocks and statements

The communication is subdivided into _communication blocks_.
Each communication block contains communication statements as follows:

 * a sequence of `input` statements and/or _input only_ `call`, _followed by_
 * a `call` statement _with output_, _followed by_
 * a sequence of `call` and `output` statements.

The first block starts with the beginning of `main`,
and the last block ends with the end of `main`.
Consecutive blocks must be separated by the `flush` statement.
Other, non-communication statements can appear in any order.

In each communication block,
all the input data not stored in global variables
must be provided at least once
as arguments to the functions in the `call` statements of the block,
_before or during_ the first `call` statement _with output_.

Moreover, all the return values of `call` statements
and all the arguments provided to invoked callbacks
must appear in `output` statements.

Finally, every callback must contain a `flush` statement
before any `input` or `call`.

=== Advantages

First, this ensures that no extra data is made available through `stdin`,
beyond what is actually provided as arguments to function calls,
at the precise time the algorithm is first required to produce output
in the current communication block.
Second, it allows to determine a precise moment,
i.e., the first call _with output_,
where all the input data in the block
are available and should be sent to the algorithm.

== Other requirements

Any declaration of a local variable must be
followed by at least one `call` statement,
actually performed before the end of the block
(it may be in a descendant block).
This is to ensure that the sequence of local variable declarations
that occur before a function call cannot depend on the value of its arguments.
