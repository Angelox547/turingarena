{% macro parameter(p) -%}
{{p.type}} {{p.name}}
{%- endmacro %}

{% macro parameters_prototype(function) -%}
  {%- set comma = joiner(", ") -%}
  {%- for p in function.parameters.values() %}{{comma()}}{{parameter(p)}}{% endfor -%}
{%- endmacro %}

{% macro interface_parameters_prototype(function) -%}
  int algorithm_id
  {%- for p in function.parameters.values() %}, {{parameter(p)}}{% endfor -%}
{%- endmacro %}

{% macro function_prototype(function) -%}
  {{function.return_type}} {{function.name}}({{parameters_prototype(function)}});
{%- endmacro %}

{% macro call_interface_function_prototype(function) -%}
  {{function.return_type}} call_{{function.name}}({{interface_parameters_prototype(function)}});
{%- endmacro %}

{% macro receive_interface_callback_prototype(function) -%}
  {{function.return_type}} on_{{function.name}}({{interface_parameters_prototype(function)}});
{%- endmacro %}

{% macro receive_call(function) %}
void receive_call_{{function.name}}() {
    {% for parameter in function.parameters.values() %}
    {{parameter.type}} {{parameter.name}};
    fscanf(INPUT_PIPE, " %d", &{{parameter.name}});
    {%- endfor %}
  
    {{function.return_type}} result = {{function.name}}(
    {%- for parameter in function.parameters.values() -%}
    {{parameter.name}}
    {%- if not loop.last -%} , {%- endif -%}
    {%- endfor -%}
    );
  
    fprintf(OUTPUT_PIPE, "%s\n", "return");
    fprintf(OUTPUT_PIPE, "%d\n", result);
}
{% endmacro %}

{% macro process_callback(callbacks) %}
    {
        char callback_name[51];
        fscanf(INPUT_PIPE, "%50s", callback_name);
        {% for callback in callbacks -%}
        if(!strcmp(callback_name, "{{callback.name}}")) {
            receive_call_{{callback.name}}();
        }
        {% endfor %}
    }
{% endmacro %}

{% macro process_command(return_type, callbacks, variables) %}
    while(1) {
        char command[51];
        fprintf(stderr, "Reading from %p\n", INPUT_PIPE);
        assert(fscanf(INPUT_PIPE, "%50s", command));
        fprintf(stderr, "%s\n", command);
        if(!strcmp(command, "return")) {
            {{return_type}} result;
            fscanf(INPUT_PIPE, " %d", &result);
            return result;
        }
        
        if(!strcmp(command, "call")) {
            {{process_callback(callbacks)}}
        }
    }
{% endmacro %}

{% macro callback(function, callbacks, variables) %}
{{function.return_type}} {{function.name}}({{parameters_prototype(function)}}) {
    fprintf(OUTPUT_PIPE, "%s\n", "call");
    fprintf(OUTPUT_PIPE, "%s\n", "{{function.name}}");

    fprintf(stderr, "%s\n", "call");
    fprintf(stderr, "%s\n", "{{function.name}}");

    {% for parameter in function.parameters.values() %}
    fprintf(OUTPUT_PIPE, "%d\n", {{parameter.name}});
    fprintf(stderr, "%d\n", {{parameter.name}});
    {%- endfor %}
    
    {{ process_command(function.return_type, callbacks, variables) }}
}
{% endmacro %}
