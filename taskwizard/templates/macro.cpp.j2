{% macro parameter(p) -%}
{{p.type}} {{p.name}}
{%- endmacro %}


{% macro parameters_signature(function) -%}
  {%- set comma = joiner(", ") -%}
  {%- for p in function.parameters.values() %}{{comma()}}{{parameter(p)}}{% endfor -%}
{%- endmacro %}


{% macro function_signature(function, prefix='') -%}
  {{function.return_type}} {{prefix}}{{function.name}}({{parameters_signature(function)}})
{%- endmacro %}


{% macro algorithm_parameters_signature(function) -%}
  int process_id
  {%- for p in function.parameters.values() %}, {{parameter(p)}}{% endfor -%}
{%- endmacro %}


{% macro algorithm_function_signature(function, prefix='') -%}
  {{function.return_type}} {{prefix}}{{function.name}}({{algorithm_parameters_signature(function)}})
{%- endmacro %}


{% macro generate_read_data(variables, driver=False) %}
    {% if driver %}
    support_trace("reading arguments\n");
    {% else %}
    support_trace("reading arguments\n");
    {% endif %}

    {% for v in variables %}
    {{v.type}} {{v.name}};

    {% if driver %}
        support_trace("reading variable '%s %s'\n", "{{v.type}}", "{{v.name}}");
        fscanf(process_upward_pipe(process_id), " %d", &{{v.name}});
    {% else %}
        support_trace("reading variable '%s %s'\n", "{{v.type}}", "{{v.name}}");
        scanf(" %d", &{{v.name}});
    {% endif %}

    {% endfor %}
{% endmacro %}


{% macro generate_write_data(variables, driver=False) %}
    {% if driver %}
    support_trace("writing arguments\n");
    {% else %}
    support_trace("writing arguments\n");
    {% endif %}

    {% for v in variables %}

    support_trace("writing variable '%s %s': %d\n", "{{v.type}}", "{{v.name}}", {{v.name}});
    printf("%d\n", {{v.name}});

    {% endfor %}
{% endmacro %}


{% macro generate_read_retval(driver=False) %}
    int retval;
    scanf(" %d", &retval);
    return retval;
{% endmacro %}


{% macro generate_write_retval(driver=False) %}
    printf("return %d\n", retval);
{% endmacro %}


{% macro generate_protocol(functions, callbacks, driver=False, interface_name="") %}
{{
  do_generate_protocol(functions, callbacks, driver, interface_name)
  |
  replace(
    "printf(",
    "fprintf(process_downward_pipe(process_id), " if driver else "printf("
  )
  | 
  replace(
    "scanf(",
    "fscanf(process_upward_pipe(process_id), " if driver else "scanf(" 
  )
  | 
  replace(
    "support_trace(",
    "support_trace_driver(process_id, " if driver else "support_trace(" 
  )
}}
{% endmacro %}

{% macro do_generate_protocol(functions, callbacks, driver=False, interface_name="") %}

{% for callback in callbacks %}

{% if driver %}
void accept_callback_{{interface_name}}_{{callback.name}}(int process_id) {
{% else %}
void accept_callback_{{callback.name}}() {
{% endif %}
    support_trace("received callback '%s'\n", "{{callback.name}}");

    {{ generate_read_data(callback.parameters.values(), driver=driver) }}
    {% if driver %}
    support_trace("calling local function '%s'\n", "on_{{callback.name}}");
    int retval = on_{{callback.name}}(process_id{% for p in callback.parameters.values() %}, {{p.name}}{% endfor %});
    support_trace("local function '%s' returned\n", "on_{{callback.name}}");
    {% else %}
    support_trace("calling local function '%s'\n", "{{callback.name}}");
    {% set comma = joiner(", ") %}
    int retval = {{callback.name}}({% for p in callback.parameters.values() %}{{ comma() }}{{p.name}}{% endfor %});
    support_trace("local function '%s' returned\n", "{{callback.name}}");
    {% endif %}
    
    support_trace("writing return value\n");
    {{ generate_write_retval(driver=driver) }}
}
{% endfor %}

{% if driver %}
void accept_any_callback_{{interface_name}}(int process_id) {
{% else %}
void accept_any_callback() {
{% endif %}
    char callback_name[51] = { 0 };
    support_trace("reading callback name\n");

    scanf("%50s", callback_name);

    {% for callback in callbacks %}
    if(!strcmp(callback_name, "{{callback.name}}")) {
        {% if driver %}
        accept_callback_{{interface_name}}_{{callback.name}}(process_id);
        {% else %}
        accept_callback_{{callback.name}}();
        {% endif %}

        return;
    }
    {% endfor %}

    support_trace("unrecognized callback: %s\n", callback_name);
    assert(0 && "Unrecognized callback");
}

{% if driver %}
void accept_callbacks_{{interface_name}}(int process_id) {
{% else %}
void accept_callbacks() {
{% endif %}
    while(1) {
        char command[51] = { 0 };
        support_trace("waiting for call/return\n");

        scanf("%50s", command);

        if(!strcmp(command, "return")) {
            support_trace("received 'return', breaking loop\n");
            break;
        } else if(!strcmp(command, "call")) {
            support_trace("received 'call', expecting a call\n");
            {% if driver %}
            accept_any_callback_{{interface_name}}(process_id);
            {% else %}
            accept_any_callback();
            {% endif %}
        } else {
            support_trace("unrecognized command: %s\n", command);
            assert(0 && "Unrecognized command");
        }
    }
}

{% for function in functions %}
    {{ algorithm_function_signature(function, "call_" if driver else "") }} {
        support_trace("calling function '%s'\n", "{{function.name}}");
        printf("%s\n", "call");
        printf("%s\n", "{{function.name}}");

        {{ generate_write_data(function.parameters.values(), driver=driver) }}

        support_trace("function called, waiting for return or callbacks...\n");
        {% if driver %}
        accept_callbacks_{{interface_name}}(process_id);
        {% else %}
        accept_callbacks();
        {% endif %}

        support_trace("reading return value for function '%s'\n", "{{function.name}}");
        {{ generate_read_retval(driver=driver) }}
    }
{% endfor %}

{% endmacro %}
