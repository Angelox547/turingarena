{% import "macro.cpp.j2" as macro %}

#include "driver.h"

{% macro generate_read_data_algorithm(variables) %}
    {% for v in variables %}
    {{v.type}} {{v.name}};
    fscanf(algorithm_upward_pipe(algorithm_id), " %d", &{{v.name}});
    {% endfor %}
{% endmacro %}

{% for interface in task.interfaces.values() %}

{% for callback in interface.callback_functions.values() %}
void accept_callback_{{interface.name}}_{{callback.name}}(int algorithm_id) {
    {{ generate_read_data_algorithm(callback.parameters.values()) }}
    on_{{callback.name}}(algorithm_id{% for p in callback.parameters.values() %}, {{p.name}}{% endfor -%}
}
{% endfor %}

void accept_any_callback_{{interface.name}}(int algorithm_id) {
    char callback_name[51] = { 0 };
    fscanf(algorithm_upward_pipe(algorithm_id), "%50s", callback_name);
    
    {% for callback in interface.callback_functions.values() %}
    if(!strcmp(callback_name, "{{callback.name}}")) {
        accept_callback_{{interface.name}}_{{callback.name}}();
    }
    {% endfor %}
    
    fprintf(stderr, "DRIVER SUPPORT: %s: unrecognized callback: %s\n", __FUNCTION__, callback_name);
    assert(0 && "Unrecognized callback");
}

void accept_callbacks_{{interface.name}}(int algorithm_id) {
    while(1) {
        char command[51] = { 0 };
        fscanf(algorithm_upward_pipe(algorithm_id), "%50s", command);
        if(!strcmp(command, "return") {
            break;
        } else if(!strcmp(command, "call") {
            accept_any_callback_{{interface.name}}(algorithm_id);
        } else {
            fprintf(stderr, "DRIVER SUPPORT: %s: unrecognized command: %s\n", __FUNCTION__, command);
            assert(0 && "Unrecognized command");
        }
    }
}


{% endfor %}

int main() {
}
