{% import "macro.cpp.j2" as macro %}

{% include "supervisor_proto.cpp" %}

#include "driver.h"

FILE* input_pipe;
FILE* output_pipe;

#define INPUT_PIPE (input_pipe)
#define OUTPUT_PIPE (output_pipe)

void set_active_algorithm(int id) {
  input_pipe = algorithm_upward_pipe(id);
  output_pipe = algorithm_downward_pipe(id);
}

void set_active_read_file(int id) {
  input_pipe = read_file_pipe(id);
  output_pipe = NULL;
}

{% for interface in task.interfaces.values() %}
  {% for function in interface.callback_functions.values() -%}
  {{ macro.function_prototype(function) }}
  {% endfor %}
  
  {% for function in interface.callback_functions.values() -%}
  {{ macro.receive_call(function) }}
  {% endfor %}
  
  {% for variable in interface.variables.values() -%}
  {{ macro.set_global(variable) }}
  {% endfor %}
  
  {% for function in interface.functions.values() -%}
  {{ macro.callback(function, interface.callback_functions.values(), []) }}
  {% endfor %}
{% endfor %}

{% for function in task.functions.values() -%}
{{ macro.receive_call(function) }}
{% endfor %}

{% for variable in task.variables.values() -%}
{{ macro.receive_set_global(variable) }}
{% endfor %}

int main() {
    setvbuf(stdout, NULL, _IONBF, 0);
    fprintf(stderr, "Start driver.\n");
    int evaluate_file = read_file_open("evaluate");
    set_active_read_file(evaluate_file);
    fprintf(stderr, "Start main loop.\n");
    {{ macro.process_command('int', task.functions.values(), task.variables.values()) }}
    read_file_close(evaluate_file);
}
