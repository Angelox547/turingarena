@@comments :: /\/\*(.|\n|\r)*\*\//
@@eol_comments :: /\/\/.*$/

start = 
  {
    | interfaces+:interface_definition
    | drivers+:driver_definition
    | scenarios+:scenario_definition
  }* $ ;

scenario_definition =
  'scenario' name:identifier '{'
    { phases+:phase_definition }*
  '}'
  ;

phase_definition =
  'phase' name:identifier '{'
    {
      | 'driver' driver_name:identifier driver_command:command ';'
      | slots+:slot_definition ';'
    }*
  '}'
  ;

slot_definition = 'slot' name:identifier 'interface' interface_name:identifier ;

command =
  function_name:identifier '(' parameters:','.{ value }* ')'
  ;

value = /[0-9]*/ ;

driver_definition =
  'driver' name:identifier '{'
  {
    | variables+:global_variable_declaration
    | functions+:function_declaration
  }*
  '}'
  ;

identifier = /[a-zA-Z_][0-9a-zA-Z_]*/ ;

interface_definition =
  'interface' name:identifier '{'
  {
    | variables+:global_variable_declaration
    | functions+:function_declaration
    | callback_functions+:callback_function_declaration
  }*
  '}' 
  ;

global_variable_declaration =
  inout:(inout|`inout`) variable:variable ';'
  ;

callback_function_declaration = 'callback' @:function_declaration ;

function_declaration =
  return_type:type name:identifier '(' parameters:','.{parameter}* ')' ';'
  ;

parameter =
  variable:variable
  ;

variable =
  type:type name:identifier {'[' array_dimensions+:array_dimension ']'}*
  ;

array_dimension =
  | constant:/[1-9][0-9]*/
  | variable_reference:identifier
  ;

type =
  'int'
  ;

inout = 'in' | 'out' | 'inout' ;
