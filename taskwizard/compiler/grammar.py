#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


KEYWORDS = {}


class GrammarBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re='\\/\\*(.|\\n|\\r)*\\*\\/',
        eol_comments_re='\\/\\/.*$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(GrammarBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class GrammarParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re='\\/\\*(.|\\n|\\r)*\\*\\/',
        eol_comments_re='\\/\\/.*$',
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=GrammarBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(GrammarParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _start_(self):
        self._algorithm_()
        self._check_eof()

    @graken()
    def _identifier_(self):
        self._pattern(r'[a-zA-Z_][0-9a-zA-Z_]*')

    @graken()
    def _algorithm_(self):
        self._token('algorithm')
        self._identifier_()
        self.name_last_node('name')
        self._token('{')

        def block2():
            self._declaration_()
        self._closure(block2)
        self.name_last_node('declarations')
        self._token('}')
        self.ast._define(
            ['declarations', 'name'],
            []
        )

    @graken()
    def _declaration_(self):
        with self._choice():
            with self._option():
                self._function_declaration_()
            with self._option():
                self._variable_declaration_()
            self._error('no available options')

    @graken()
    def _variable_declaration_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._inout_()
                with self._option():
                    self._constant('inout')
                self._error('no available options')
        self.name_last_node('inout')
        self._type_()
        self.name_last_node('type')
        self._identifier_()
        self.name_last_node('name')
        self._token(';')
        self.ast._define(
            ['inout', 'name', 'type'],
            []
        )

    @graken()
    def _function_declaration_(self):
        with self._optional():
            self._token('callback')
        self.name_last_node('callback')
        self._type_()
        self.name_last_node('return_type')
        self._identifier_()
        self.name_last_node('name')
        self._token('(')

        def sep4():
            self._token(',')

        def block4():
            self._parameter_()
        self._closure(block4, sep=sep4)
        self.name_last_node('parameters')
        self._token(')')
        self._token(';')
        self.ast._define(
            ['callback', 'name', 'parameters', 'return_type'],
            []
        )

    @graken()
    def _parameter_(self):
        self._type_()
        self.name_last_node('type')
        self._identifier_()
        self.name_last_node('name')
        self.ast._define(
            ['name', 'type'],
            []
        )

    @graken()
    def _type_(self):
        self._token('int')

    @graken()
    def _inout_(self):
        with self._choice():
            with self._option():
                self._token('in')
            with self._option():
                self._token('out')
            with self._option():
                self._token('inout')
            self._error('expecting one of: in inout out')


class GrammarSemantics(object):
    def start(self, ast):
        return ast

    def identifier(self, ast):
        return ast

    def algorithm(self, ast):
        return ast

    def declaration(self, ast):
        return ast

    def variable_declaration(self, ast):
        return ast

    def function_declaration(self, ast):
        return ast

    def parameter(self, ast):
        return ast

    def type(self, ast):
        return ast

    def inout(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = GrammarParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from grako.util import asjson

    ast = generic_main(main, GrammarParser, name='Grammar')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
